# Burly MCP Server - Docker Compose Configuration
#
# This compose file provides a complete deployment setup for the Burly MCP server
# with proper volume mounts, security constraints, and environment configuration.
#
# SECURITY FEATURES:
# - Non-root user execution (agentops:1000)
# - Read-only root filesystem
# - No network access (stdin/stdout only)
# - Resource limits and capability restrictions
# - Proper mount permissions for data isolation
#
# Usage:
#   docker compose up -d    # Start in background
#   docker compose logs -f  # View logs
#   docker compose down     # Stop and remove
#
# Note: No version field needed - deprecated since Docker Compose v1.27.0

services:
  burly-mcp:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: burly-mcp-server

    # Security: Run as non-root user (matches Dockerfile)
    user: "1000:1000"

    # Resource limits for security and stability
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

    # Environment variables (use .env file for sensitive values)
    environment:
      # Blog directory configuration
      - BLOG_STAGE_ROOT=/app/blog/stage
      - BLOG_PUBLISH_ROOT=/app/blog/publish

      # Gotify notifications (optional - leave empty to disable)
      - GOTIFY_URL=${GOTIFY_URL:-}
      - GOTIFY_TOKEN=${GOTIFY_TOKEN:-}

      # Output and logging configuration
      - OUTPUT_TRUNCATE_LIMIT=${OUTPUT_TRUNCATE_LIMIT:-10000}
      - AUDIT_LOG_PATH=/var/log/agentops/audit.jsonl
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

    # Volume mounts with security-focused permissions
    volumes:
      # Policy configuration (read-only for security)
      - ../policy:/app/policy:ro

      # Audit logs (read-write for logging)
      - burly-mcp-logs:/var/log/agentops:rw

      # Blog staging directory (read-only to prevent tampering)
      - ./blog/stage:/app/blog/stage:ro

      # Blog publish directory (read-write for publishing)
      - burly-mcp-blog-publish:/app/blog/publish:rw

      # Docker socket (read-only for monitoring only)
      - /var/run/docker.sock:/var/run/docker.sock:ro

    # Network isolation - MCP uses stdin/stdout only
    network_mode: none

    # Security constraints
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE

    # Read-only root filesystem for maximum security
    read_only: true

    # Temporary filesystems for writable areas
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
      - /run:noexec,nosuid,size=50m

    # Restart policy
    restart: unless-stopped

    # Homepage dashboard labels (uncomment to enable)
    # WARNING: This service uses network_mode: none and communicates via stdin/stdout only
    # The URLs below are for documentation purposes - no HTTP endpoints are exposed
    # labels:
    #   - homepage.group=AI
    #   - homepage.weight=30
    #   - homepage.name=Burly MCP
    #   - homepage.icon=mdi-robot-outline
    #   - homepage.description=Secure MCP server for AI system operations (stdin/stdout only)
    #   - homepage.showStats=false
    #   - homepage.badge=ðŸ”§ MCP
    #   # Note: No href/siteMonitor/widget URLs - service has no network access

    # Health check (process-based since network_mode: none)
    healthcheck:
      test: [ "CMD", "python", "-c", "import server.main; print('MCP server healthy')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# Named volumes for persistent data
volumes:
  burly-mcp-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  burly-mcp-blog-publish:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./blog/publish
