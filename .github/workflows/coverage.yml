name: Legacy Coverage Validation (Deprecated)

"on":
  workflow_dispatch:  # Manual trigger only
    inputs:
      min_coverage:
        description: 'Minimum coverage threshold'
        required: false
        default: '80'
        type: string
      reason:
        description: 'Reason for running legacy coverage validation'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.12'
  MIN_COVERAGE: ${{ github.event.inputs.min_coverage || '80' }}

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[test,dev]
        
    - name: Run unit tests with coverage
      run: |
        python scripts/check_coverage.py --unit-only --min-coverage ${{ env.MIN_COVERAGE }}
        
    - name: Run integration tests with coverage
      run: |
        python scripts/check_coverage.py --integration-only --min-coverage ${{ env.MIN_COVERAGE }}
        
    - name: Validate overall coverage
      run: |
        python scripts/check_coverage.py --validate-only --min-coverage ${{ env.MIN_COVERAGE }}
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          htmlcov/
          coverage.xml
          coverage.json
        retention-days: 30
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage data
          let coverageData;
          try {
            coverageData = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
          } catch (error) {
            console.log('Could not read coverage.json');
            return;
          }
          
          const totalCoverage = coverageData.totals.percent_covered;
          const minCoverage = ${{ env.MIN_COVERAGE }};
          const status = totalCoverage >= minCoverage ? '✅' : '❌';
          
          // Create comment body
          const body = `## ${status} Coverage Report
          
          **Overall Coverage:** ${totalCoverage.toFixed(2)}%
          **Minimum Required:** ${minCoverage}%
          **Status:** ${totalCoverage >= minCoverage ? 'PASSED' : 'FAILED'}
          
          ### Coverage by File
          
          | File | Coverage |
          |------|----------|`;
          
          // Add file coverage details
          let fileLines = [];
          for (const [filename, fileData] of Object.entries(coverageData.files)) {
            const fileCoverage = fileData.summary.percent_covered;
            const displayName = filename.replace('src/burly_mcp/', '');
            const fileStatus = fileCoverage >= minCoverage ? '✅' : '❌';
            fileLines.push(`| ${fileStatus} ${displayName} | ${fileCoverage.toFixed(2)}% |`);
          }
          
          const fullBody = body + '\n' + fileLines.join('\n') + '\n\n[View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: fullBody
          });

  coverage-diff:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      
    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}
        path: base
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies for PR
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[test,dev]
        
    - name: Run coverage for PR
      run: |
        python scripts/check_coverage.py --validate-only --no-report
        cp coverage.json coverage-pr.json
        
    - name: Install dependencies for base
      run: |
        cd base
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[test,dev]
        
    - name: Run coverage for base
      run: |
        cd base
        python scripts/check_coverage.py --validate-only --no-report
        cp coverage.json ../coverage-base.json
        
    - name: Compare coverage
      run: |
        python -c "
        import json
        
        # Load coverage data
        with open('coverage-pr.json') as f:
            pr_data = json.load(f)
        with open('coverage-base.json') as f:
            base_data = json.load(f)
            
        pr_coverage = pr_data['totals']['percent_covered']
        base_coverage = base_data['totals']['percent_covered']
        diff = pr_coverage - base_coverage
        
        print(f'Base coverage: {base_coverage:.2f}%')
        print(f'PR coverage: {pr_coverage:.2f}%')
        print(f'Difference: {diff:+.2f}%')
        
        # Set output for GitHub Actions
        with open('coverage-diff.txt', 'w') as f:
            f.write(f'{diff:.2f}')
        "
        
    - name: Comment coverage diff
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const diff = parseFloat(fs.readFileSync('coverage-diff.txt', 'utf8'));
          
          let emoji, status;
          if (diff > 0) {
            emoji = '📈';
            status = 'IMPROVED';
          } else if (diff < 0) {
            emoji = '📉';
            status = 'DECREASED';
          } else {
            emoji = '➡️';
            status = 'UNCHANGED';
          }
          
          const body = `## ${emoji} Coverage Comparison
          
          **Status:** ${status}
          **Change:** ${diff > 0 ? '+' : ''}${diff.toFixed(2)}%
          
          This PR ${diff > 0 ? 'improves' : diff < 0 ? 'decreases' : 'maintains'} test coverage.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });