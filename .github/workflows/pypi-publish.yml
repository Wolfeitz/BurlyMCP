name: PyPI Package Publishing

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        type: string
      is_prerelease:
        description: 'Whether this is a prerelease'
        required: false
        type: boolean
        default: false
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        type: boolean
        default: false
    outputs:
      package_url:
        description: 'Published package URL'
        value: ${{ jobs.publish.outputs.package_url }}

env:
  PYTHON_VERSION: '3.12'

permissions:
  contents: read
  id-token: write  # For trusted publishing

jobs:
  build:
    name: Build Package
    runs-on: ubuntu-latest
    outputs:
      package_files: ${{ steps.build.outputs.package_files }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install build twine

    - name: Verify version consistency
      run: |
        # Check that the version in __init__.py matches the expected version
        actual_version=$(python -c "
        import sys
        sys.path.insert(0, 'src')
        from burly_mcp import __version__
        print(__version__)
        ")
        
        expected_version="${{ inputs.version }}"
        
        if [[ "$actual_version" != "$expected_version" ]]; then
          echo "‚ùå Version mismatch!"
          echo "Expected: $expected_version"
          echo "Actual: $actual_version"
          exit 1
        fi
        
        echo "‚úÖ Version consistency verified: $actual_version"

    - name: Build package
      id: build
      run: |
        # Clean any existing build artifacts
        rm -rf dist/ build/ *.egg-info/
        
        # Build the package
        python -m build
        
        # List built packages
        echo "Built packages:"
        ls -la dist/
        
        # Set output for package files
        package_files=$(ls dist/ | tr '\n' ' ')
        echo "package_files=$package_files" >> $GITHUB_OUTPUT

    - name: Validate package
      run: |
        # Check package with twine
        twine check dist/*
        
        # Verify package contents
        echo "Package contents:"
        for file in dist/*.whl; do
          echo "=== $file ==="
          python -m zipfile -l "$file" | head -20
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ inputs.version }}
        path: dist/
        retention-days: 90

  test-install:
    name: Test Installation
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ inputs.version }}
        path: dist/

    - name: Test package installation
      run: |
        # Create a temporary virtual environment
        python -m venv test_env
        source test_env/bin/activate
        
        # Install the package from wheel
        wheel_file=$(ls dist/*.whl | head -1)
        pip install "$wheel_file"
        
        # Test import and basic functionality
        python -c "
        import burly_mcp
        print(f'‚úÖ Successfully imported burly_mcp v{burly_mcp.__version__}')
        print(f'Author: {burly_mcp.__author__}')
        print(f'Description: {burly_mcp.__description__}')
        "
        
        # Test console script
        burly-mingo-mcp --help || echo "Console script test completed"
        
        echo "‚úÖ Installation test passed for Python ${{ matrix.python-version }}"

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, test-install]
    environment: 
      name: ${{ inputs.test_pypi && 'test-pypi' || 'pypi' }}
      url: ${{ steps.publish.outputs.package_url }}
    outputs:
      package_url: ${{ steps.publish.outputs.package_url }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ inputs.version }}
        path: dist/

    - name: Publish to Test PyPI
      if: inputs.test_pypi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true
        print-hash: true

    - name: Publish to PyPI
      if: '!inputs.test_pypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        print-hash: true

    - name: Set package URL
      id: publish
      run: |
        if [[ "${{ inputs.test_pypi }}" == "true" ]]; then
          package_url="https://test.pypi.org/project/burly-mingo-mcp/${{ inputs.version }}/"
        else
          package_url="https://pypi.org/project/burly-mingo-mcp/${{ inputs.version }}/"
        fi
        echo "package_url=$package_url" >> $GITHUB_OUTPUT
        echo "üì¶ Package published: $package_url"

  post-publish-validation:
    name: Post-Publish Validation
    runs-on: ubuntu-latest
    needs: publish
    if: '!inputs.test_pypi'  # Only validate production PyPI
    
    steps:
    - name: Wait for package availability
      run: |
        echo "‚è≥ Waiting for package to be available on PyPI..."
        sleep 120  # Wait 2 minutes for PyPI to process

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Test installation from PyPI
      run: |
        # Create clean environment
        python -m venv validation_env
        source validation_env/bin/activate
        
        # Try to install from PyPI with retries
        max_attempts=5
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt/$max_attempts: Installing from PyPI..."
          
          if pip install burly-mingo-mcp==${{ inputs.version }}; then
            echo "‚úÖ Successfully installed from PyPI"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Failed to install from PyPI after $max_attempts attempts"
              exit 1
            fi
            echo "‚è≥ Retrying in 30 seconds..."
            sleep 30
            attempt=$((attempt + 1))
          fi
        done
        
        # Validate installation
        python -c "
        import burly_mcp
        assert burly_mcp.__version__ == '${{ inputs.version }}'
        print(f'‚úÖ PyPI package validation successful: {burly_mcp.__version__}')
        "
        
        # Test console script
        burly-mingo-mcp --help || echo "Console script validation completed"

  generate-release-assets:
    name: Generate Release Assets
    runs-on: ubuntu-latest
    needs: [build, publish]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ inputs.version }}
        path: dist/

    - name: Generate checksums
      run: |
        cd dist/
        
        # Generate SHA256 checksums
        sha256sum * > SHA256SUMS
        
        # Generate installation instructions
        cat > INSTALL.md << EOF
        # Installation Instructions
        
        ## From PyPI (Recommended)
        
        \`\`\`bash
        pip install burly-mingo-mcp==${{ inputs.version }}
        \`\`\`
        
        ## From Source Distribution
        
        \`\`\`bash
        # Download and verify
        wget https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/burly_mingo_mcp-${{ inputs.version }}.tar.gz
        sha256sum -c SHA256SUMS
        
        # Install
        pip install burly_mingo_mcp-${{ inputs.version }}.tar.gz
        \`\`\`
        
        ## From Wheel
        
        \`\`\`bash
        # Download and verify
        wget https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/burly_mingo_mcp-${{ inputs.version }}-py3-none-any.whl
        sha256sum -c SHA256SUMS
        
        # Install
        pip install burly_mingo_mcp-${{ inputs.version }}-py3-none-any.whl
        \`\`\`
        
        ## Verification
        
        \`\`\`bash
        # Verify installation
        python -c "import burly_mcp; print(burly_mcp.__version__)"
        burly-mingo-mcp --help
        \`\`\`
        EOF
        
        echo "Generated release assets:"
        ls -la

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-${{ inputs.version }}
        path: |
          dist/
        retention-days: 365

  publish-summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [build, test-install, publish, post-publish-validation, generate-release-assets]
    if: always()
    
    steps:
    - name: Generate publish summary
      run: |
        echo "## üì¶ PyPI Package Publishing Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Package Build | ${{ needs.build.result == 'success' && '‚úÖ' || '‚ùå' }} | Python wheel and source dist |" >> $GITHUB_STEP_SUMMARY
        echo "| Installation Tests | ${{ needs.test-install.result == 'success' && '‚úÖ' || '‚ùå' }} | Python 3.11, 3.12 |" >> $GITHUB_STEP_SUMMARY
        echo "| PyPI Publish | ${{ needs.publish.result == 'success' && '‚úÖ' || '‚ùå' }} | ${{ inputs.test_pypi && 'Test PyPI' || 'Production PyPI' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Post-Publish Validation | ${{ needs.post-publish-validation.result == 'success' && '‚úÖ' || needs.post-publish-validation.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} | Installation from PyPI |" >> $GITHUB_STEP_SUMMARY
        echo "| Release Assets | ${{ needs.generate-release-assets.result == 'success' && '‚úÖ' || '‚ùå' }} | Checksums and instructions |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.publish.result }}" == "success" ]]; then
          echo "### üéâ Package Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package**: \`burly-mingo-mcp\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: \`${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: ${{ inputs.test_pypi && 'Test PyPI' || 'PyPI' }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: ${{ needs.publish.outputs.package_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì• Installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ inputs.test_pypi }}" == "true" ]]; then
            echo "# Install from Test PyPI" >> $GITHUB_STEP_SUMMARY
            echo "pip install -i https://test.pypi.org/simple/ burly-mingo-mcp==${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "# Install from PyPI" >> $GITHUB_STEP_SUMMARY
            echo "pip install burly-mingo-mcp==${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Package publishing failed. Check the logs above for details.**" >> $GITHUB_STEP_SUMMARY
        fi