[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "burly-mingo-mcp"
dynamic = ["version"]
description = "Secure MCP server for system operations with Docker integration and policy enforcement"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Burly MCP Team", email = "team@burly-mcp.dev"}
]
maintainers = [
    {name = "Burly MCP Team", email = "team@burly-mcp.dev"}
]
keywords = [
    "mcp",
    "model-context-protocol", 
    "docker",
    "security",
    "policy-enforcement",
    "audit-logging",
    "system-operations",
    "container-management"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Monitoring",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Environment :: Console",
    "Framework :: Pydantic",
    "Typing :: Typed"
]
requires-python = ">=3.11"
dependencies = [
    "pyyaml>=6.0",
    "pydantic>=2.0.0",
    "mcp>=0.1.0",
    "docker>=6.0.0",
    "requests>=2.28.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    # Core Testing Framework
    "pytest>=8.2,<9.0",
    "pytest-cov>=5.0,<6.0", 
    "pytest-mock>=3.14,<4.0",
    "coverage>=7.6,<8.0",
    "pytest-asyncio>=0.21.0,<1.0",
    "testcontainers>=3.7.0,<4.0",
    
    # Code Quality and Linting
    "ruff>=0.6,<1.0",
    "mypy>=1.11,<2.0",
    "black>=24.0,<25.0",
    
    # Security Tools
    "bandit>=1.7,<2.0",
    "pip-audit>=2.0.0,<3.0",
    "safety>=2.3.0,<3.0",
    
    # Documentation
    "sphinx>=7.0.0,<8.0",
    "sphinx-rtd-theme>=1.3.0,<2.0",
    "myst-parser>=2.0.0,<3.0",
    
    # Development Tools
    "pre-commit>=3.0.0,<4.0",
    
    # Type Stubs
    "types-jsonschema>=4.0.0,<5.0",
    "types-PyYAML>=6.0.0,<7.0",
    "types-requests>=2.28.0,<3.0",
]
test = [
    "pytest>=8.2,<9.0",
    "pytest-cov>=5.0,<6.0",
    "pytest-mock>=3.14,<4.0",
    "pytest-asyncio>=0.21.0,<1.0",
    "testcontainers>=3.7.0,<4.0",
]
security = [
    "bandit>=1.7,<2.0",
    "pip-audit>=2.0.0,<3.0",
    "safety>=2.3.0,<3.0",
]
docs = [
    "sphinx>=7.0.0,<8.0",
    "sphinx-rtd-theme>=1.3.0,<2.0",
    "myst-parser>=2.0.0,<3.0",
]

[project.scripts]
burly-mingo-mcp = "burly_mcp.server.main:main"

[project.urls]
Homepage = "https://github.com/Wolfeitz/BurlyMCP"
Repository = "https://github.com/Wolfeitz/BurlyMCP"
Issues = "https://github.com/Wolfeitz/BurlyMCP/issues"
Documentation = "https://github.com/Wolfeitz/BurlyMCP/blob/main/README.md"
Changelog = "https://github.com/Wolfeitz/BurlyMCP/blob/main/CHANGELOG.md"

[tool.setuptools.dynamic]
version = {attr = "burly_mcp.__version__"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["burly_mcp*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
burly_mcp = ["py.typed"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",
]
markers = [
    "unit: Unit tests that don't require external dependencies",
    "integration: Integration tests that may require Docker or external services",
    "docker: Tests that require Docker to be available",
    "slow: Tests that take longer than usual to run",
    "security: Security-focused tests",
    "mcp: Tests related to MCP protocol functionality",
    "flaky: Tests that are known to be flaky in CI environments",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "mcp.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", ".venv", "build"]
skips = ["B101"]  # Skip assert_used test

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit (security)
    "UP",  # pyupgrade
]
ignore = [
    "E203", # whitespace before ':'
    "S101", # use of assert
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "S108"]  # Allow assert, hardcoded passwords in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Keep flake8 config for backward compatibility during transition
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.coverage.run]
source = ["src/burly_mcp"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/conftest.py",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "\\.\\.\\.",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Burly MCP Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true