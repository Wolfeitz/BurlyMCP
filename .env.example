# Burly MCP Server Configuration
# Copy this file to .env and customize the values for your environment

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log level for the application (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Directory for log files (must be writable by the application)
# WARNING: Ensure this directory has proper permissions and is not world-writable
LOG_DIR=/var/log/agentops

# =============================================================================
# POLICY CONFIGURATION
# =============================================================================

# Path to the policy configuration file
# SECURITY: This file defines what tools are available and their security constraints
POLICY_FILE=config/policy/tools.yaml

# =============================================================================
# BLOG OPERATIONS CONFIGURATION
# =============================================================================

# Root directory for blog staging operations
# SECURITY: Files outside this directory cannot be accessed by blog tools
BLOG_STAGE_ROOT=/app/data/blog/stage

# Root directory for blog publishing operations
# SECURITY: Published content will be written to this directory
BLOG_PUBLISH_ROOT=/app/data/blog/public

# =============================================================================
# RESOURCE LIMITS AND TIMEOUTS
# =============================================================================

# Default timeout for tool execution (in seconds)
# Prevents runaway processes from consuming resources indefinitely
DEFAULT_TIMEOUT_SEC=30

# Maximum output size before truncation (in bytes)
# Prevents excessive memory usage from tools with large output
OUTPUT_TRUNCATE_LIMIT=10240

# Maximum number of concurrent tool executions
# Prevents resource exhaustion from parallel operations
MAX_CONCURRENT_TOOLS=5

# =============================================================================
# AUDIT LOGGING CONFIGURATION
# =============================================================================

# Path to the audit log file (JSONL format)
# SECURITY: This file contains sensitive operation logs - protect accordingly
AUDIT_LOG_PATH=/var/log/agentops/audit.jsonl

# =============================================================================
# NOTIFICATION CONFIGURATION
# =============================================================================

# Enable/disable notifications (true/false)
NOTIFICATIONS_ENABLED=true

# Gotify server URL for notifications
# Example: https://gotify.example.com
GOTIFY_URL=

# Gotify application token for sending notifications
# SECURITY: Keep this token secret - it allows sending notifications
# Generate this token in your Gotify application settings
GOTIFY_TOKEN=

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server name for identification in logs and notifications
SERVER_NAME=burly-mcp

# Server version (usually set automatically by the application)
SERVER_VERSION=1.0.0

# =============================================================================
# DOCKER CONFIGURATION (when running in containers)
# =============================================================================

# User ID for running the application (security best practice)
# Use a non-root user ID (e.g., 1000)
PUID=1000

# Group ID for running the application
PGID=1000

# =============================================================================
# SECURITY NOTES
# =============================================================================

# 1. File Permissions:
#    - Ensure log directories are writable only by the application user
#    - Protect audit logs from unauthorized access
#    - Blog directories should have appropriate read/write permissions

# 2. Network Security:
#    - Use HTTPS for Gotify URLs in production
#    - Protect Gotify tokens like passwords
#    - Consider network isolation for the MCP server

# 3. Path Security:
#    - Blog root paths should be absolute and well-defined
#    - Avoid using paths that could lead to privilege escalation
#    - Regularly audit file access patterns in logs

# 4. Resource Limits:
#    - Set appropriate timeouts to prevent DoS attacks
#    - Monitor resource usage and adjust limits as needed
#    - Consider container resource limits in production

# 5. Audit and Monitoring:
#    - Regularly review audit logs for suspicious activity
#    - Set up log rotation to prevent disk space issues
#    - Monitor notification delivery for operational awareness