# Burly MCP Server - Environment Configuration Template
#
# ============================================================================
# SECURITY NOTICE: NEVER COMMIT ACTUAL SECRETS TO VERSION CONTROL
# ============================================================================
#
# This file contains ONLY placeholder values and documentation.
# Copy this file to '.env' and replace placeholders with actual values.
#
# üîí SECURITY BEST PRACTICES:
# - Never commit .env files with real secrets
# - Use strong, unique tokens for all services
# - Regularly rotate API keys and tokens
# - Use environment-specific configurations
# - Monitor access logs for suspicious activity
#
# üìö EDUCATIONAL PURPOSE:
# This configuration demonstrates secure environment variable management
# for AI agent systems, showing how to properly isolate secrets and
# provide comprehensive documentation for operators.

# ============================================================================
# GOTIFY NOTIFICATION CONFIGURATION (Optional)
# ============================================================================
#
# Gotify is a self-hosted notification service that can alert you to
# important events from the MCP server. This is completely optional.
#
# üîß SETUP INSTRUCTIONS:
# 1. Deploy Gotify server (see: https://gotify.net/docs/install)
# 2. Create an application in Gotify admin panel
# 3. Copy the application token here
# 4. Set the URL to your Gotify server
#
# ‚ö†Ô∏è  SECURITY WARNINGS:
# - Use HTTPS URLs in production (never HTTP)
# - Keep tokens secret and rotate them regularly
# - Use firewall rules to restrict Gotify access
# - Monitor notification logs for abuse

# Gotify server URL (include protocol and port)
# Example: https://gotify.yourdomain.com
# Leave empty to disable notifications
GOTIFY_URL=

# Gotify application token (NOT user token)
# Example: A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6
# Leave empty to disable notifications
GOTIFY_TOKEN=

# ============================================================================
# BLOG PUBLISHING CONFIGURATION
# ============================================================================
#
# These settings control where blog content is staged and published.
# The staging area is read-only for validation, while the publish area
# is write-only for final content deployment.
#
# üîß DIRECTORY STRUCTURE:
# - Staging: Where draft content is validated (read-only)
# - Publish: Where final content is deployed (write-only)
#
# ‚ö†Ô∏è  SECURITY CONSIDERATIONS:
# - Use absolute paths to prevent directory traversal
# - Ensure proper file permissions (staging: 755, publish: 755)
# - Regularly backup published content
# - Monitor for unauthorized file modifications

# Blog staging directory (read-only for validation)
# This is where draft blog posts are stored for validation
# Default: /app/blog/stage (inside container)
BLOG_STAGE_ROOT=/app/blog/stage

# Blog publish directory (write-only for publishing)
# This is where validated blog posts are published
# Default: /app/blog/publish (inside container)
BLOG_PUBLISH_ROOT=/app/blog/publish

# ============================================================================
# LOGGING AND MONITORING CONFIGURATION
# ============================================================================
#
# Configure how the MCP server logs operations and handles output.
# All operations are audited for security and compliance purposes.
#
# üìä AUDIT LOGGING:
# - All tool executions are logged in JSON Lines format
# - Logs include timestamps, tool names, execution status, and metrics
# - Sensitive data is automatically redacted from logs
#
# üîß LOG MANAGEMENT:
# - Rotate logs regularly to prevent disk space issues
# - Monitor log files for security events
# - Consider centralized logging for production deployments

# Maximum output size before truncation (in bytes)
# Prevents memory exhaustion from tools with excessive output
# Default: 10000 (10KB) - increase for tools with larger expected output
OUTPUT_TRUNCATE_LIMIT=10000

# Audit log file path
# All tool executions are logged here in JSON Lines format
# Default: /var/log/agentops/audit.jsonl (inside container)
AUDIT_LOG_PATH=/var/log/agentops/audit.jsonl

# Log level for application logging
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Default: INFO (recommended for production)
LOG_LEVEL=INFO

# ============================================================================
# SECURITY AND RESOURCE LIMITS
# ============================================================================
#
# These settings enforce security policies and prevent resource exhaustion.
# Adjust carefully based on your security requirements and system capacity.
#
# üîí SECURITY FEATURES:
# - Timeout enforcement prevents runaway processes
# - Output limits prevent memory exhaustion
# - Path validation prevents directory traversal
# - Command validation prevents injection attacks
#
# ‚ö†Ô∏è  PRODUCTION RECOMMENDATIONS:
# - Use conservative timeout values
# - Monitor resource usage regularly
# - Set up alerts for security violations
# - Review and update limits based on usage patterns

# Default timeout for tool execution (in seconds)
# Tools can override this with their own timeout settings
# Default: 30 seconds (conservative for security)
DEFAULT_TIMEOUT_SEC=30

# Maximum number of concurrent tool executions
# Prevents resource exhaustion from parallel operations
# Default: 5 (adjust based on system capacity)
MAX_CONCURRENT_TOOLS=5

# Enable strict security mode
# When enabled, additional security checks are performed
# Default: true (always recommended for production)
STRICT_SECURITY_MODE=true

# ============================================================================
# DEVELOPMENT AND DEBUGGING (Development Only)
# ============================================================================
#
# These settings are for development and testing purposes only.
# NEVER enable debug features in production environments.
#
# ‚ö†Ô∏è  PRODUCTION WARNING:
# Debug features can expose sensitive information and reduce security.
# Always disable debug features in production deployments.

# Enable debug logging (Development Only)
# Provides verbose logging for troubleshooting
# Default: false (NEVER enable in production)
DEBUG_LOGGING=false

# Enable development tools (Development Only)
# Allows additional tools for development and testing
# Default: false (NEVER enable in production)
ENABLE_DEV_TOOLS=false

# Mock external API calls (Testing Only)
# Useful for testing without external dependencies
# Default: false (only for automated testing)
MOCK_EXTERNAL_CALLS=false

# ============================================================================
# CONTAINER-SPECIFIC CONFIGURATION
# ============================================================================
#
# These settings are specific to containerized deployments and should
# generally not be modified unless you understand the implications.
#
# üê≥ CONTAINER NOTES:
# - User ID 1000 matches the 'agentops' user in the container
# - Paths are relative to the container filesystem
# - Volume mounts are configured in docker-compose.yml

# Container user ID (matches Dockerfile)
# Default: 1000 (agentops user)
CONTAINER_UID=1000

# Container group ID (matches Dockerfile)
# Default: 1000 (agentops group)
CONTAINER_GID=1000

# ============================================================================
# EXAMPLE PRODUCTION CONFIGURATION
# ============================================================================
#
# Here's an example of what a production .env file might look like:
#
# # Production Gotify Configuration
# GOTIFY_URL=https://notifications.mycompany.com
# GOTIFY_TOKEN=your_gotify_app_token_here_32_chars
#
# # Production Blog Configuration
# BLOG_STAGE_ROOT=/app/blog/stage
# BLOG_PUBLISH_ROOT=/app/blog/publish
#
# # Production Logging
# OUTPUT_TRUNCATE_LIMIT=50000
# LOG_LEVEL=INFO
#
# # Production Security
# DEFAULT_TIMEOUT_SEC=30
# STRICT_SECURITY_MODE=true
# DEBUG_LOGGING=false
# ENABLE_DEV_TOOLS=false

# ============================================================================
# TROUBLESHOOTING GUIDE
# ============================================================================
#
# Common issues and solutions:
#
# üîß GOTIFY NOTIFICATIONS NOT WORKING:
# - Verify GOTIFY_URL is accessible from container
# - Check GOTIFY_TOKEN is valid application token (not user token)
# - Ensure firewall allows outbound HTTPS connections
# - Check Gotify server logs for authentication errors
#
# üîß BLOG PUBLISHING FAILS:
# - Verify directory permissions (755 for both staging and publish)
# - Check that paths exist and are accessible
# - Ensure no path traversal in file names
# - Verify file extensions are allowed (.md, .markdown)
#
# üîß TOOL TIMEOUTS:
# - Increase DEFAULT_TIMEOUT_SEC for slow operations
# - Check system resources (CPU, memory, disk)
# - Monitor Docker daemon performance
# - Consider tool-specific timeout overrides
#
# üîß PERMISSION ERRORS:
# - Verify container runs as user 1000:1000
# - Check volume mount permissions
# - Ensure Docker socket is accessible (if using Docker tools)
# - Verify audit log directory is writable
#
# üîß HIGH RESOURCE USAGE:
# - Reduce OUTPUT_TRUNCATE_LIMIT
# - Lower MAX_CONCURRENT_TOOLS
# - Implement log rotation
# - Monitor for runaway processes