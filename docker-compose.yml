# Burly MCP Server - Modern Docker Compose Configuration
# 
# This compose file provides a production-ready deployment setup for the Burly MCP server
# with Docker secrets integration, security hardening, and proper resource management.
#
# SECURITY FEATURES:
# - Docker secrets integration for sensitive data
# - Non-root user execution (agentops:1000)
# - Read-only root filesystem with minimal writable areas
# - Capability dropping and security constraints
# - Resource limits and proper volume permissions
#
# Usage:
#   docker compose up -d              # Start in background
#   docker compose logs -f burly-mcp  # View logs
#   docker compose down               # Stop and remove
#
# Note: No version field - deprecated since Docker Compose v1.27.0

services:
  burly-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: burly-mcp-server
    
    # Security: Run as non-root user (matches Dockerfile)
    user: "1000:1000"
    
    # Resource limits for security and stability
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    # Environment variables with secure defaults
    environment:
      # Core configuration
      - BURLY_CONFIG_DIR=/app/config
      - BURLY_LOG_DIR=/var/log/agentops
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Docker configuration
      - DOCKER_SOCKET=/var/run/docker.sock
      - DOCKER_TIMEOUT=${DOCKER_TIMEOUT:-30}
      
      # Security settings
      - MAX_OUTPUT_SIZE=${MAX_OUTPUT_SIZE:-1048576}
      - AUDIT_ENABLED=${AUDIT_ENABLED:-true}
      
      # Blog configuration
      - BLOG_STAGE_ROOT=/app/data/blog/stage
      - BLOG_PUBLISH_ROOT=/app/data/blog/publish
      
      # Notification configuration (use secrets for production)
      - GOTIFY_URL=${GOTIFY_URL:-}
      - GOTIFY_TOKEN_FILE=${GOTIFY_TOKEN_FILE:-}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    # Docker secrets for production (comment out for development)
    secrets:
      - gotify_token
      - docker_access_token
    
    # Volume mounts with security-focused permissions
    volumes:
      # Configuration (read-only for security)
      - ./config:/app/config:ro
      
      # Audit logs (read-write for logging)
      - burly-mcp-logs:/var/log/agentops:rw
      
      # Blog directories
      - burly-mcp-blog-stage:/app/data/blog/stage:rw
      - burly-mcp-blog-publish:/app/data/blog/publish:rw
      
      # Docker socket (read-only for container operations)
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    # Network isolation - MCP uses stdin/stdout only
    network_mode: none
    
    # Security constraints
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # May be needed for Docker operations
    
    # Drop all capabilities and add only what's needed
    cap_drop:
      - ALL
    cap_add:
      - CHOWN      # For file ownership changes
      - SETUID     # For user switching if needed
      - SETGID     # For group switching if needed
    
    # Read-only root filesystem for maximum security
    read_only: true
    
    # Temporary filesystems for writable areas
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m
      - /var/tmp:noexec,nosuid,nodev,size=50m
      - /run:noexec,nosuid,nodev,size=50m
    
    # Restart policy
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "from burly_mcp.server.main import main; print('Health check OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    
    # Labels for container management
    labels:
      - "com.burly-mcp.service=main"
      - "com.burly-mcp.version=1.0.0"
      - "com.burly-mcp.security=hardened"

# Development override service (use with docker-compose.override.yml)
  burly-mcp-dev:
    extends: burly-mcp
    container_name: burly-mcp-dev
    build:
      target: dependencies  # Use dependencies stage for development
    environment:
      - LOG_LEVEL=DEBUG
      - AUDIT_ENABLED=false
    volumes:
      # Mount source code for development
      - ./src:/app/src:rw
      - ./config:/app/config:rw
      - ./tests:/app/tests:ro
    # Remove read-only constraint for development
    read_only: false
    profiles:
      - dev

# Named volumes for persistent data
volumes:
  burly-mcp-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  burly-mcp-blog-stage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/blog/stage
  
  burly-mcp-blog-publish:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/blog/publish

# Docker secrets for production deployment
secrets:
  gotify_token:
    external: true
    name: burly_mcp_gotify_token
  
  docker_access_token:
    external: true
    name: burly_mcp_docker_token

# Networks (none used due to stdin/stdout communication)
networks:
  default:
    driver: none